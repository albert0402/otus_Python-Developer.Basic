# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178

variables:
  PROJECT_PATH: "home_works/hw_12"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  TEST_PATH: "store_app/tests"

stages:
  - test
  - deploy-dev
  - deploy-prod

# Общие настройки
default:
  image: python:3.11
  cache:
    paths:
      - ${PROJECT_PATH}/.cache/pip
      - ${PROJECT_PATH}/.venv
    key: ${CI_COMMIT_REF_SLUG}-${CI_PROJECT_ID}
  before_script:
    - cd ${PROJECT_PATH}
    - pip install poetry
    - poetry install --no-interaction --no-ansi

# Тестирование (использует dev-настройки)
test:
  stage: test
  variables:
    DJANGO_SETTINGS_MODULE: "config.settings"
  script:
    - poetry run python manage.py test ${TEST_PATH}
    - poetry run python manage.py check --deploy

# Деплой 
deploy-prod:
  stage: deploy-prod
  variables:
    DJANGO_SETTINGS_MODULE: "config.settings.production"
  script:
    - echo "Деплой на production"
    - poetry run python manage.py check --deploy
    - poetry run python manage.py collectstatic --noinput
    # Добавьте production-команды
  environment:
    name: production
    url: https://yourdomain.com
  when: manual  # Требует ручного подтверждения
  only:
    - main  # Ветка для production