services:
  nginx:
    image: nginx:1.23-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    depends_on:
      web:
        condition: service_healthy
    networks:
      - backend

  web:
    build: .
    command: bash -c "poetry install --no-root && poetry run python manage.py migrate && poetry run python manage.py collectstatic --noinput && poetry run gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120"
    env_file:
      - .env
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "poetry", "run", "python", "-c", "import requests; requests.get('http://localhost:8000/health/', timeout=2) or exit(1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: store_db
      POSTGRES_USER: store_user
      POSTGRES_PASSWORD: store_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U store_user -d store_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:6-alpine
    command: redis-server
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  backend:
    driver: bridge