services:
  # Nginx как reverse proxy и для раздачи статики
  nginx:
    image: nginx:1.23-alpine  # Облегченный образ nginx
    ports:
      - "8000:80"  # Пробрасываем порт 80 контейнера на 8000 хоста для доступа из браузера
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf  # Монтируем конфиг nginx
      - static_volume:/app/staticfiles  # Общий том для статики
      - media_volume:/app/mediafiles  # Общий том для медиафайлов
    depends_on:
      - web  # Ждем запуска web-сервиса
    networks:
      - backend  # Подключаем к внутренней сети

  # Django приложение с Gunicorn
  web:
    build: .  # Собираем из Dockerfile в текущей директории
    command: bash -c "poetry run python manage.py migrate && poetry run python manage.py collectstatic --noinput && poetry run gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    env_file:
      - .env  # Переменные окружения из файла
    volumes:
      - .:/app  # Монтируем код для разработки (hot-reload)
      - static_volume:/app/staticfiles  # Общий том для статики
      - media_volume:/app/mediafiles  # Общий том для медиафайлов
    expose:
      - "8000"  # Открываем порт для других контейнеров в сети Docker
    depends_on:
      - db  # Ждем запуска БД
      - redis  # Ждем запуска Redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]  # Проверка здоровья
      interval: 30s  # Проверка каждые 30 секунд
      timeout: 10s  # Таймаут 10 секунд
      retries: 3  # Количество попыток
    networks:
      - backend

  # PostgreSQL база данных
  db:
    image: postgres:14-alpine  # Облегченный образ PostgreSQL
    environment:
      POSTGRES_DB: store_db  # Имя БД
      POSTGRES_USER: store_user  # Пользователь
      POSTGRES_PASSWORD: store_password  # Пароль
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Том для хранения данных БД
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U store_user -d store_db"]  # Проверка готовности БД
      interval: 5s  # Частые проверки для БД
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Redis для кэширования и Celery
  redis:
    image: redis:6-alpine  # Облегченный образ Redis
    volumes:
      - redis_data:/data  # Том для хранения данных Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # Простая проверка работы Redis
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

# Определение томов для хранения данных
volumes:
  postgres_data:  # Постоянное хранилище для БД
  redis_data:  # Постоянное хранилище для Redis
  static_volume:  # Общий том для статических файлов
  media_volume:  # Общий том для медиафайлов

# Создание внутренней сети для безопасного взаимодействия сервисов
networks:
  backend:
    driver: bridge  # Тип сети для связи между контейнерами